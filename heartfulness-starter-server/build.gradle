buildscript {
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.0.2.RELEASE'
    id 'com.github.ksoichiro.build.info' version '0.2.0'
    id 'com.google.cloud.tools.jib' version '2.1.0'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: "com.moowork.node"

repositories {
    // required for hazelcast-kubernetes:1.1.1-SNAPSHOT
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

ext {
    println("HeartfulnessStarterServer ${scmVersion.version}")
}

scmVersion {
    tag {
        prefix = 'server'
    }
}

project.version = scmVersion.version

springBoot {
    // This statement tells the Gradle Spring Boot plugin
    // to generate a file
    // build/resources/main/META-INF/build-info.properties
    // that is picked up by Spring Boot to display
    // via /info endpoint.
    buildInfo {
        // Generate extra build info.
        properties {
            additional = [
                    'by'                 : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName,
                    // Override name property
                    name                 : 'heartfulness-starter-server'
            ]
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


dependencies {
    compile project(':heartfulness-starter-api')
    compile group: 'com.google.http-client', name: 'google-http-client', version: '1.23.0'
    compile group: 'org.heartfulness.unifiedplatform', name: 'common-util', version: '1.0.23'
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
    }
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile 'com.google.firebase:firebase-admin:5.3.0'
    compile group: 'com.google.firebase', name: 'firebase-server-sdk', version: '3.0.3'

    compile 'com.google.cloud.sql:mysql-socket-factory:1.0.2'
    compile('org.lognet:grpc-spring-boot-starter:2.2.0')
    compile 'com.h2database:h2:1.4.196'
    compile 'org.flywaydb:flyway-core:4.2.0'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'

    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.42'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    compile group: 'net.sf.supercsv', name: 'super-csv', version: '2.1.0'

    //added dependency for Google Key Management System
    compile 'org.flywaydb:flyway-core:4.2.0'

    testCompile "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties

    if (project.hasProperty("args")) {
        args findProperty('args')
        systemProperty "args", findProperty('args')
    }
}

jib {
    from {
        image = 'registry://gcr.io/google-appengine/openjdk'
    }
    to {
        image = "gcr.io/${System.getenv("PROJECT_ID") ?: "unifiedplatform-dev"}/heartfulness-starter-server:${scmVersion.version}"
    }
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        ports = ['30005', '30006']
        jvmFlags = [
                '-XX:+UnlockExperimentalVMOptions',
                '-XX:+UseCGroupMemoryLimitForHeap',
                '-Djava.security.egd=file:/dev/urandom',
                '-agentpath:/opt/cdbg/cdbg_java_agent.so',
                '-Dcom.google.cdbg.module=heartfulness-starter-server',
                "-Dcom.google.cdbg.version=${scmVersion.version}"
        ]
        mainClass = 'org.heartfulness.starter.StarterApp'
    }
}

node {
    version = '10.15.0'
    npmVersion = '6.4.1'
    download = true
    nodeModulesDir = file("webapp")
}

task cleanWebapp() {
    delete './webapp/node_modules'
    delete './src/main/resources/static'
}

task buildWebapp(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run', 'build']
}

task cleanBuildWebapp {
    dependsOn 'cleanWebapp'
    dependsOn 'buildWebapp'
    tasks.findByName('buildWebapp').mustRunAfter 'cleanWebapp'
}
